/*-------------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported from C# to Java by Wolfgang Ahorner
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
------------------------------------------------------------------------*/
-->begin
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class Parser {
-->constants
	static final boolean _T = true;
	static final boolean _x = false;
	static final int minErrDist = 2;

	public Token t;    // last recognized token
	public Token la;   // lookahead token
	int errDist = minErrDist;
	
	public Scanner scanner;
	public Errors errors;

	-->declarations

	public Parser(Scanner scanner) {
		this.scanner = scanner;
		errors = new Errors();
	}

	void SynErr (int n) {
		if (errDist >= minErrDist) errors.SynErr(la.line, la.col, n);
		errDist = 0;
	}

	public void SemErr (String msg) {
		if (errDist >= minErrDist) errors.SemErr(t.line, t.col, msg);
		errDist = 0;
	}
	
	void Get () {
		for (;;) {
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT) {
				++errDist;
				break;
			}
-->pragmas
			la = t;
		}
	}
	
	void Expect (int n) {
		if (la.kind==n) Get(); else { SynErr(n); }
	}
	
	boolean StartOf (int s) {
		return set[s][la.kind];
	}
	
	void ExpectWeak (int n, int follow) {
		if (la.kind == n) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}
	
	boolean WeakSeparator (int n, int syFol, int repFol) {
		int kind = la.kind;
		if (kind == n) { Get(); return true; }
		else if (StartOf(repFol)) return false;
		else {
			SynErr(n);
			while (!(set[syFol][kind] || set[repFol][kind] || set[0][kind])) {
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}
	
-->productions

	public void Parse() {
		la = new Token();
		la.val = "";		
		Get();
-->parseRoot
	}

	private static final boolean[][] set = {
-->initialization
	};

	public static class Errors 
	{
		public final List<Message> errors = new ArrayList<>();
		public final List<Message> warnings = new ArrayList<>();
		//private String errMsgFormat = "%s: Line %d, column %d: %s"; // error type, line, column, message text
		//private String errMsgFormat2 = "%s: %s"; // error type, message text

		private String errMsgFormat = "%s: %s"; // error type, line, column, message text
		
		protected void printMsg(int line, int column, String msgText, MessageType type) 
		{
			//String message = String.format(errMsgFormat, type.name, line, column, msgText);
			//(type.isError ? errors : warnings).add(message);

			Message message = new Message(
				String.format(errMsgFormat, type.name, msgText)
			);
			message.setRow(line);
			message.setColumn(column);

			(type.isError? errors : warnings).add(message);
		}
		
		public void SynErr (int line, int col, int n) 
		{
			String s;
			switch (n) 
			{-->errors
				default: s = "error " + n; break;
			}
			printMsg(line, col, s, MessageType.SYNTAX_ERROR);
		}

		public void SynErr (int line, int col, String s) 
		{
			printMsg(line, col, s, MessageType.SYNTAX_ERROR);
		}

		public void SemErr (int line, int col, String s) 
		{	
			printMsg(line, col, s, MessageType.SEMANTIC_ERROR);
		}
		
		public void SemErr (String s) 
		{
			//this.errors.add(String.format(errMsgFormat, MessageType.SEMANTIC_ERROR.name, s));
			Message message = new Message(
				String.format(errMsgFormat, MessageType.SEMANTIC_ERROR.name, s)
			);
			this.errors.add(message);
		}
		
		public void Warning (int line, int col, String s) 
		{	
			printMsg(line, col, s, MessageType.WARNING);
		}
		
		public void Warning (String s) 
		{
			//this.warnings.add(String.format(errMsgFormat, MessageType.SEMANTIC_ERROR.name, s));
			Message message = new Message(
				String.format(errMsgFormat, MessageType.SEMANTIC_ERROR.name, s)
			);
			this.errors.add(message);
		}
	} // Errors

	public static enum MessageType
	{
		SYNTAX_ERROR("Syntax Error", true),
		SEMANTIC_ERROR("Semantic Error", true),
		WARNING("Warning", false);

		public final String name;
		public final boolean isError;

		private MessageType(String name, boolean isError)
		{
			this.name = name;
			this.isError = isError;
		}
	}

	public static class Message
	{
		private static final Map<Character, String> CHARS = new HashMap<>();
	
		static
		{
			CHARS.put('\\', "\\\\");
			CHARS.put('\"', "\\\"");
			CHARS.put('\'', "\\'");
			CHARS.put('\n', "\\n");
			CHARS.put('\t', "\\t");
			CHARS.put('\b', "\\b");
			CHARS.put('\r', "\\r");
			CHARS.put('\f', "\\f");
		}

		private int row = -1;
		private int column = -1;
		private String text = "";

		public Message(String text)
		{
			this.text = text;
		}

		public void setRow(int row) { this.row = row; }
		public void setColumn(int column) { this.column = column; }

		public String text() { return this.text; }
		public int row() { return this.row; }
		public int column() { return this.column; }

		public String toJsonString()
		{
			return String.format("{\"row\": %d, \"column\": %d, \"text\": \"%s\"}", this.row, this.column, replaceEscapeChars(this.text));
		}

		@Override
		public String toString()
		{
			List<String> pos = new ArrayList<>();
			if (this.row >= 0) pos.add("Line " + this.row);
			if (this.column >= 0) pos.add("Column " + this.column);
		
			if (pos.size() > 0)
			{
				return "[" + String.join("; ", pos) + "] " + this.text;
			}

			return this.text;
		}

		public static String replaceEscapeChars(String text)
		{
			String result = "";
			for (int i = 0; i < text.length(); i++)
			{
				char c = text.charAt(i);
				if (CHARS.containsKey(c))
				{
					result += CHARS.get(c);
				}
				else
				{
					result += c;
				}
			}
			
			return result;
		}
	}
} // end Parser

class FatalError extends RuntimeException 
{
	public static final long serialVersionUID = 1L;
	public FatalError(String s) { super(s); }
}